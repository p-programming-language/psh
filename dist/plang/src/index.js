"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PHost = exports.P = exports.Interpreter = exports.Resolver = exports.Binder = exports.INTRINSIC_TYPES = exports.KEYWORDS = exports.Syntax = exports.Token = exports.Lexer = exports.TypeChecker = exports.Parser = void 0;
const tslib_1 = require("tslib");
const keywords_1 = require("./code-analysis/tokenization/keywords");
Object.defineProperty(exports, "KEYWORDS", { enumerable: true, get: function () { return keywords_1.KEYWORDS; } });
const type_sets_1 = require("./code-analysis/type-checker/types/type-sets");
Object.defineProperty(exports, "INTRINSIC_TYPES", { enumerable: true, get: function () { return type_sets_1.INTRINSIC_TYPES; } });
const token_1 = require("./code-analysis/tokenization/token");
Object.defineProperty(exports, "Token", { enumerable: true, get: function () { return token_1.Token; } });
const syntax_type_1 = tslib_1.__importDefault(require("./code-analysis/tokenization/syntax-type"));
exports.Syntax = syntax_type_1.default;
const binder_1 = tslib_1.__importDefault(require("./code-analysis/binder"));
exports.Binder = binder_1.default;
const resolver_1 = tslib_1.__importDefault(require("./code-analysis/resolver"));
exports.Resolver = resolver_1.default;
const lexer_1 = tslib_1.__importDefault(require("./code-analysis/tokenization/lexer"));
exports.Lexer = lexer_1.default;
const interpreter_1 = tslib_1.__importDefault(require("./runtime/interpreter"));
exports.Interpreter = interpreter_1.default;
const p_host_1 = tslib_1.__importDefault(require("../tools/p-host"));
exports.PHost = p_host_1.default;
const p_1 = tslib_1.__importDefault(require("../tools/p"));
exports.P = p_1.default;
var parser_1 = require("./code-analysis/parser");
Object.defineProperty(exports, "Parser", { enumerable: true, get: function () { return parser_1.Parser; } });
var type_checker_1 = require("./code-analysis/type-checker");
Object.defineProperty(exports, "TypeChecker", { enumerable: true, get: function () { return type_checker_1.TypeChecker; } });
